(: This query essentially processes author data from a the jsonl file, extracts their names, affiliations, and associated links, 
ensuring uniqueness in title-link pairs before returning the resulting JSON structure. It determines the author's title by checking various conditions 
related to their affiliations and name. It constructs a string representing the author's name and affiliation(s) in different scenarios (whether it is an array or dictionary (object))

More specifically, for the links, it first attempts to retrieve a link associated with the author:
If a URL exists directly in the author data, it uses that.
If not, it checks if there's an alternative link specified as "sameAs."
If there's an @id present and it doesn't start with "https://tools.clariah.nl", it uses that as a link.
Otherwise, it returns an empty sequence for the link.

:)



let $results := (
  for $i in json-file("{JSONL}", 10)
  where $i.identifier eq "{ID}" 
return (
    for $author in $i.author[]
    let $title :=
      if (exists($author.affiliation) and ($author.affiliation.name instance of array)) then
          for $name in $author.affiliation.name[]
          where $name."@language" eq "en" return
                 $author."givenName" || " " || $author."familyName" || ", " || $name."@value"

      else if (exists($author.affiliation) and ($author.affiliation.name instance of string)) then
        $author."givenName" || " " || $author."familyName" || ", " || $author.affiliation.name
      else if (exists($author.affiliation) and ($author.affiliation.legalName instance of string)) then
        $author."givenName" || " " || $author."familyName" || ", " || $author.affiliation.legalName
else if (exists($author.affiliation) and ($author.affiliation instance of array)) then
for $name in $author.affiliation[[1]]
return $author."givenName" || " " || $author."familyName" || ", " || $name.name

      else
        $author."givenName" || " " || $author."familyName"
    return {
      "title": $title,
      "link": (
if (exists($author."url")) then
          $author."url"      
else if (exists($author."sameAs")) then
          $author."sameAs"
        else if (exists($author."@id") and not(starts-with($author."@id", "https://tools.clariah.nl"))) then
          $author."@id"
        else ()
      )
    }
  )
)

let $uniqueValues :=
  for $result in distinct-values(
    for $r in $results
    return fn:concat(
      $r."title",
      "|",
      string-join(
        for $link in $r."link"
        return if ($link instance of xs:string) then $link else (),
        "|"
      )
    )
  )
  let $title := fn:substring-before($result, "|")
  let $link := fn:substring-after($result, "|")
  group by $title
    return {
    "title": $title,
    "link": (
      if ($link = "") then
        ()
      else
        $link
    )
  }

return [$uniqueValues]